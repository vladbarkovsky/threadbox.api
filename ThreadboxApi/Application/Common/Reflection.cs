using System.Reflection;
using ThreadboxApi.Application.Identity.Permissions;

namespace ThreadboxApi.Application.Common
{
    public class Reflection
    {
        /// <returns>values of all permission constants (see <see cref="IPermissionSet"/>).</returns>
        public static IEnumerable<string> GetPermissions()
        {
            return Assembly
                .GetExecutingAssembly()
                .GetTypes()
                .Where(x => x.IsAssignableTo(typeof(IPermissionSet)) && x.IsClass)
                .SelectMany(x => x.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy))
                .Select(x => x.GetRawConstantValue().ToString());
        }

        /// <summary>
        /// Creates TypeScript file with permission constants.
        /// See api-permissions.ts in client repository.
        /// </summary>
        public static void GenerateTypeScriptPermissions()
        {
            using var writer = new StreamWriter($@"..\..\threadbox.front\api-permissions.ts");

            writer.WriteLine(
                "//----------------------" + "\r\n" +
                "// <auto-generated>" + "\r\n" +
                "//     Generated using the server ThreadboxApi.Startup.GeneratePermissionsForClient()" + "\r\n" +
                "// </auto-generated>" + "\r\n" +
                "//----------------------" + "\r\n" +
                "\r\n" +
                "/* tslint:disable */" + "\r\n" +
                "/* eslint-disable */" + "\r\n" +
                "// ReSharper disable InconsistentNaming" + "\r\n");

            var permissionSetTypes = Assembly
                .GetExecutingAssembly()
                .GetTypes()
                .Where(x => x.IsAssignableTo(typeof(IPermissionSet)) && x.IsClass);

            foreach (var type in permissionSetTypes)
            {
                writer.WriteLine($"export class {type.Name} {{");
                var constants = type.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);

                foreach (var constant in constants)
                {
                    var constantName = constant.Name[..1].ToLower() + constant.Name[1..];
                    writer.WriteLine($"  static readonly {constantName}: string = '{constant.GetRawConstantValue()}';");
                }

                writer.WriteLine("}\r\n");
            }
        }
    }
}